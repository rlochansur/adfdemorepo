{
	"name": "mappingDataFlow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_employees_ind",
						"type": "DatasetReference"
					},
					"name": "employees"
				},
				{
					"dataset": {
						"referenceName": "ds_dept",
						"type": "DatasetReference"
					},
					"name": "department"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_AzureSynapseAnalytics_employees",
						"type": "DatasetReference"
					},
					"name": "employeeDetails",
					"description": "Export data to dssynapse_employeesDetails"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				},
				{
					"name": "filter1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "split1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmpID as string,",
				"          {First Name} as string,",
				"          {Last Name} as string,",
				"          Email as string,",
				"          Phone as string,",
				"          Gender as string,",
				"          {Job Title} as string,",
				"          {Years Of Experience} as string,",
				"          Salary as string,",
				"          Country as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> employees",
				"source(output(",
				"          {Dept ID} as string,",
				"          {Emp ID} as string,",
				"          {Dept Code} as string,",
				"          {Dept Description} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> department",
				"employees, department join(EmpID == {Emp ID},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive({First Name} = upper({First Name}),",
				"          {Last Name} = upper({Last Name})) ~> ModifyColumns1",
				"ModifyColumns1 filter({Dept Code}=='IT') ~> filter1",
				"ModifyColumns1 aggregate(groupBy({Dept Code}),",
				"     EmpID = count()) ~> aggregate1",
				"join1 split(equals({Dept Code},'IT'),",
				"     disjoint: false) ~> split1@(ItDept, OtherDept)",
				"filter1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     preSQLs:['truncate table dbo.employeesDetails'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          EmpID,",
				"          FirstName = {First Name},",
				"          LastName = {Last Name},",
				"          Email,",
				"          Phone,",
				"          Gender,",
				"          JobTitle = {Job Title},",
				"          YearsOfExperience = {Years Of Experience},",
				"          Salary,",
				"          Country,",
				"          DeptID = {Dept ID},",
				"          DeptCode = {Dept Code},",
				"          DeptDescription = {Dept Description}",
				"     )) ~> employeeDetails"
			]
		}
	}
}